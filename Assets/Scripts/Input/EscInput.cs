//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.1
//     from Assets/EscInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @EscInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @EscInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""EscInput"",
    ""maps"": [
        {
            ""name"": ""EscMenu"",
            ""id"": ""dbd6733d-579a-4cc7-bce6-af1e4e16d2fb"",
            ""actions"": [
                {
                    ""name"": ""BackMenu"",
                    ""type"": ""Button"",
                    ""id"": ""7d0fc75c-f7c0-4c8f-9fe6-2059e29ce4eb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""645aba0e-bd15-42dd-b4ad-805cbf6634f4"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BackMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""EscMenu"",
            ""bindingGroup"": ""EscMenu"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // EscMenu
        m_EscMenu = asset.FindActionMap("EscMenu", throwIfNotFound: true);
        m_EscMenu_BackMenu = m_EscMenu.FindAction("BackMenu", throwIfNotFound: true);
    }

    ~@EscInput()
    {
        UnityEngine.Debug.Assert(!m_EscMenu.enabled, "This will cause a leak and performance issues, EscInput.EscMenu.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // EscMenu
    private readonly InputActionMap m_EscMenu;
    private List<IEscMenuActions> m_EscMenuActionsCallbackInterfaces = new List<IEscMenuActions>();
    private readonly InputAction m_EscMenu_BackMenu;
    public struct EscMenuActions
    {
        private @EscInput m_Wrapper;
        public EscMenuActions(@EscInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @BackMenu => m_Wrapper.m_EscMenu_BackMenu;
        public InputActionMap Get() { return m_Wrapper.m_EscMenu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(EscMenuActions set) { return set.Get(); }
        public void AddCallbacks(IEscMenuActions instance)
        {
            if (instance == null || m_Wrapper.m_EscMenuActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_EscMenuActionsCallbackInterfaces.Add(instance);
            @BackMenu.started += instance.OnBackMenu;
            @BackMenu.performed += instance.OnBackMenu;
            @BackMenu.canceled += instance.OnBackMenu;
        }

        private void UnregisterCallbacks(IEscMenuActions instance)
        {
            @BackMenu.started -= instance.OnBackMenu;
            @BackMenu.performed -= instance.OnBackMenu;
            @BackMenu.canceled -= instance.OnBackMenu;
        }

        public void RemoveCallbacks(IEscMenuActions instance)
        {
            if (m_Wrapper.m_EscMenuActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IEscMenuActions instance)
        {
            foreach (var item in m_Wrapper.m_EscMenuActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_EscMenuActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public EscMenuActions @EscMenu => new EscMenuActions(this);
    private int m_EscMenuSchemeIndex = -1;
    public InputControlScheme EscMenuScheme
    {
        get
        {
            if (m_EscMenuSchemeIndex == -1) m_EscMenuSchemeIndex = asset.FindControlSchemeIndex("EscMenu");
            return asset.controlSchemes[m_EscMenuSchemeIndex];
        }
    }
    public interface IEscMenuActions
    {
        void OnBackMenu(InputAction.CallbackContext context);
    }
}
